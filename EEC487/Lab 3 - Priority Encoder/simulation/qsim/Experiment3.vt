// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/20/2015 19:34:22"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    enhanced_prio
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module enhanced_prio_vlg_sample_tst(
	r,
	sampler_tx
);
input [9:0] r;
output sampler_tx;

reg sample;
time current_time;
always @(r)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module enhanced_prio_vlg_check_tst (
	fst,
	snd,
	sampler_rx
);
input [3:0] fst;
input [3:0] snd;
input sampler_rx;

reg [3:0] fst_expected;
reg [3:0] snd_expected;

reg [3:0] fst_prev;
reg [3:0] snd_prev;

reg [3:0] fst_expected_prev;
reg [3:0] snd_expected_prev;

reg [3:0] last_fst_exp;
reg [3:0] last_snd_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	fst_prev = fst;
	snd_prev = snd;
end

// update expected /o prevs

always @(trigger)
begin
	fst_expected_prev = fst_expected;
	snd_expected_prev = snd_expected;
end


// expected fst[ 3 ]
initial
begin
	fst_expected[3] = 1'bX;
end 
// expected fst[ 2 ]
initial
begin
	fst_expected[2] = 1'bX;
end 
// expected fst[ 1 ]
initial
begin
	fst_expected[1] = 1'bX;
end 
// expected fst[ 0 ]
initial
begin
	fst_expected[0] = 1'bX;
end 
// expected snd[ 3 ]
initial
begin
	snd_expected[3] = 1'bX;
end 
// expected snd[ 2 ]
initial
begin
	snd_expected[2] = 1'bX;
end 
// expected snd[ 1 ]
initial
begin
	snd_expected[1] = 1'bX;
end 
// expected snd[ 0 ]
initial
begin
	snd_expected[0] = 1'bX;
end 
// generate trigger
always @(fst_expected or fst or snd_expected or snd)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected fst = %b | expected snd = %b | ",fst_expected_prev,snd_expected_prev);
	$display("| real fst = %b | real snd = %b | ",fst_prev,snd_prev);
`endif
	if (
		( fst_expected_prev[0] !== 1'bx ) && ( fst_prev[0] !== fst_expected_prev[0] )
		&& ((fst_expected_prev[0] !== last_fst_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fst[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fst_expected_prev);
		$display ("     Real value = %b", fst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_fst_exp[0] = fst_expected_prev[0];
	end
	if (
		( fst_expected_prev[1] !== 1'bx ) && ( fst_prev[1] !== fst_expected_prev[1] )
		&& ((fst_expected_prev[1] !== last_fst_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fst[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fst_expected_prev);
		$display ("     Real value = %b", fst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_fst_exp[1] = fst_expected_prev[1];
	end
	if (
		( fst_expected_prev[2] !== 1'bx ) && ( fst_prev[2] !== fst_expected_prev[2] )
		&& ((fst_expected_prev[2] !== last_fst_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fst[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fst_expected_prev);
		$display ("     Real value = %b", fst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_fst_exp[2] = fst_expected_prev[2];
	end
	if (
		( fst_expected_prev[3] !== 1'bx ) && ( fst_prev[3] !== fst_expected_prev[3] )
		&& ((fst_expected_prev[3] !== last_fst_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fst[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fst_expected_prev);
		$display ("     Real value = %b", fst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_fst_exp[3] = fst_expected_prev[3];
	end
	if (
		( snd_expected_prev[0] !== 1'bx ) && ( snd_prev[0] !== snd_expected_prev[0] )
		&& ((snd_expected_prev[0] !== last_snd_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port snd[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", snd_expected_prev);
		$display ("     Real value = %b", snd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_snd_exp[0] = snd_expected_prev[0];
	end
	if (
		( snd_expected_prev[1] !== 1'bx ) && ( snd_prev[1] !== snd_expected_prev[1] )
		&& ((snd_expected_prev[1] !== last_snd_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port snd[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", snd_expected_prev);
		$display ("     Real value = %b", snd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_snd_exp[1] = snd_expected_prev[1];
	end
	if (
		( snd_expected_prev[2] !== 1'bx ) && ( snd_prev[2] !== snd_expected_prev[2] )
		&& ((snd_expected_prev[2] !== last_snd_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port snd[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", snd_expected_prev);
		$display ("     Real value = %b", snd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_snd_exp[2] = snd_expected_prev[2];
	end
	if (
		( snd_expected_prev[3] !== 1'bx ) && ( snd_prev[3] !== snd_expected_prev[3] )
		&& ((snd_expected_prev[3] !== last_snd_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port snd[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", snd_expected_prev);
		$display ("     Real value = %b", snd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_snd_exp[3] = snd_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#200000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module enhanced_prio_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [9:0] r;
// wires                                               
wire [3:0] fst;
wire [3:0] snd;

wire sampler;                             

// assign statements (if any)                          
enhanced_prio i1 (
// port map - connection between master ports and signals/registers   
	.fst(fst),
	.r(r),
	.snd(snd)
);
// r[ 9 ]
initial
begin
	r[9] = 1'b0;
end 
// r[ 8 ]
initial
begin
	r[8] = 1'b0;
end 
// r[ 7 ]
initial
begin
	r[7] = 1'b0;
end 
// r[ 6 ]
initial
begin
	r[6] = 1'b0;
end 
// r[ 5 ]
initial
begin
	r[5] = 1'b0;
end 
// r[ 4 ]
initial
begin
	r[4] = 1'b0;
	r[4] = #160000 1'b1;
end 
// r[ 3 ]
initial
begin
	r[3] = 1'b0;
	r[3] = #80000 1'b1;
	r[3] = #80000 1'b0;
end 
// r[ 2 ]
initial
begin
	repeat(2)
	begin
		r[2] = 1'b0;
		r[2] = #40000 1'b1;
		# 40000;
	end
	r[2] = 1'b0;
end 
// r[ 1 ]
always
begin
	r[1] = 1'b0;
	r[1] = #20000 1'b1;
	#20000;
end 
// r[ 0 ]
always
begin
	r[0] = 1'b0;
	r[0] = #10000 1'b1;
	#10000;
end 

enhanced_prio_vlg_sample_tst tb_sample (
	.r(r),
	.sampler_tx(sampler)
);

enhanced_prio_vlg_check_tst tb_out(
	.fst(fst),
	.snd(snd),
	.sampler_rx(sampler)
);
endmodule


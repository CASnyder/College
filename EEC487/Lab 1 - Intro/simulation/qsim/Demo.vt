// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/09/2015 20:38:23"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    eq2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module eq2_vlg_sample_tst(
	a,
	b,
	sampler_tx
);
input [1:0] a;
input [1:0] b;
output sampler_tx;

reg sample;
time current_time;
always @(a or b)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module eq2_vlg_check_tst (
	aeqb,
	sampler_rx
);
input  aeqb;
input sampler_rx;

reg  aeqb_expected;

reg  aeqb_prev;

reg  aeqb_expected_prev;

reg  last_aeqb_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	aeqb_prev = aeqb;
end

// update expected /o prevs

always @(trigger)
begin
	aeqb_expected_prev = aeqb_expected;
end



// expected aeqb
initial
begin
	aeqb_expected = 1'bX;
end 
// generate trigger
always @(aeqb_expected or aeqb)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected aeqb = %b | ",aeqb_expected_prev);
	$display("| real aeqb = %b | ",aeqb_prev);
`endif
	if (
		( aeqb_expected_prev !== 1'bx ) && ( aeqb_prev !== aeqb_expected_prev )
		&& ((aeqb_expected_prev !== last_aeqb_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aeqb :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aeqb_expected_prev);
		$display ("     Real value = %b", aeqb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aeqb_exp = aeqb_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#200000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module eq2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] a;
reg [1:0] b;
// wires                                               
wire aeqb;

wire sampler;                             

// assign statements (if any)                          
eq2 i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.aeqb(aeqb),
	.b(b)
);
// a[ 1 ]
initial
begin
	a[1] = 1'b0;
	a[1] = #20000 1'b1;
	a[1] = #5000 1'b0;
	a[1] = #10000 1'b1;
	a[1] = #20000 1'b0;
	a[1] = #15000 1'b1;
	a[1] = #5000 1'b0;
	a[1] = #5000 1'b1;
	a[1] = #5000 1'b0;
	a[1] = #15000 1'b1;
	a[1] = #15000 1'b0;
	a[1] = #10000 1'b1;
	a[1] = #10000 1'b0;
	a[1] = #5000 1'b1;
	a[1] = #5000 1'b0;
	a[1] = #5000 1'b1;
	a[1] = #5000 1'b0;
	a[1] = #10000 1'b1;
	a[1] = #10000 1'b0;
end 
// a[ 0 ]
initial
begin
	a[0] = 1'b1;
	a[0] = #2465 1'b0;
	a[0] = #11800 1'b1;
	a[0] = #5735 1'b0;
	a[0] = #11599 1'b1;
	a[0] = #7000 1'b0;
	a[0] = #2295 1'b1;
	# 1233;
	repeat(2)
	begin
		a[0] = 1'b0;
		a[0] = #2100 1'b1;
		# 1233;
	end
	a[0] = 1'b0;
	a[0] = #1207 1'b1;
	a[0] = #1468 1'b0;
	a[0] = #6700 1'b1;
	a[0] = #3300 1'b0;
	a[0] = #6700 1'b1;
	a[0] = #1832 1'b0;
	a[0] = #5298 1'b1;
	a[0] = #3600 1'b0;
	a[0] = #1102 1'b1;
	# 209;
	repeat(2)
	begin
		a[0] = 1'b0;
		a[0] = #1367 1'b1;
		# 1966;
	end
	a[0] = 1'b0;
	a[0] = #1367 1'b1;
	a[0] = #1758 1'b0;
	a[0] = #3364 1'b1;
	a[0] = #7200 1'b0;
	a[0] = #19309 1'b1;
	a[0] = #8600 1'b0;
	a[0] = #1527 1'b1;
	a[0] = #4745 1'b0;
	a[0] = #4300 1'b1;
	a[0] = #955 1'b0;
	a[0] = #6724 1'b1;
	a[0] = #8400 1'b0;
	a[0] = #5211 1'b1;
	a[0] = #2550 1'b0;
	a[0] = #2450 1'b1;
	a[0] = #2550 1'b0;
	a[0] = #2115 1'b1;
	a[0] = #3340 1'b0;
	a[0] = #4400 1'b1;
	a[0] = #5600 1'b0;
	a[0] = #4400 1'b1;
	a[0] = #2295 1'b0;
	a[0] = #3250 1'b1;
	a[0] = #1750 1'b0;
	a[0] = #3250 1'b1;
end 
// b[ 1 ]
initial
begin
	b[1] = 1'b1;
	b[1] = #8049 1'b0;
	b[1] = #9600 1'b1;
	b[1] = #2351 1'b0;
	b[1] = #2777 1'b1;
	b[1] = #5800 1'b0;
	b[1] = #2590 1'b1;
	# 2133;
	repeat(2)
	begin
		b[1] = 1'b0;
		b[1] = #4533 1'b1;
		# 2133;
	end
	b[1] = 1'b0;
	b[1] = #3368 1'b1;
	b[1] = #4023 1'b0;
	b[1] = #10000 1'b1;
	b[1] = #5977 1'b0;
	b[1] = #2349 1'b1;
	b[1] = #2300 1'b0;
	b[1] = #2700 1'b1;
	b[1] = #2300 1'b0;
	b[1] = #3019 1'b1;
	b[1] = #4400 1'b0;
	b[1] = #15762 1'b1;
	b[1] = #6200 1'b0;
	b[1] = #970 1'b1;
	# 49;
	repeat(2)
	begin
		b[1] = 1'b0;
		b[1] = #2034 1'b1;
		# 1299;
	end
	b[1] = 1'b0;
	b[1] = #2034 1'b1;
	b[1] = #1251 1'b0;
	b[1] = #2661 1'b1;
	b[1] = #3800 1'b0;
	b[1] = #7812 1'b1;
	b[1] = #5200 1'b0;
	b[1] = #4800 1'b1;
	b[1] = #5200 1'b0;
	b[1] = #527 1'b1;
	b[1] = #7945 1'b0;
	b[1] = #9600 1'b1;
	b[1] = #2622 1'b0;
	b[1] = #6800 1'b1;
	b[1] = #3200 1'b0;
	b[1] = #6800 1'b1;
	b[1] = #3033 1'b0;
	b[1] = #1286 1'b1;
	b[1] = #3500 1'b0;
end 
// b[ 0 ]
initial
begin
	b[0] = 1'b0;
	b[0] = #928 1'b1;
	# 2999;
	repeat(2)
	begin
		b[0] = 1'b0;
		b[0] = #3667 1'b1;
		# 2999;
	end
	b[0] = 1'b0;
	b[0] = #2741 1'b1;
	b[0] = #4548 1'b0;
	b[0] = #9000 1'b1;
	b[0] = #6452 1'b0;
	b[0] = #1755 1'b1;
	# 2333;
	repeat(2)
	begin
		b[0] = 1'b0;
		b[0] = #4333 1'b1;
		# 2333;
	end
	b[0] = 1'b0;
	b[0] = #7965 1'b1;
	b[0] = #4200 1'b0;
	b[0] = #5800 1'b1;
	b[0] = #4200 1'b0;
	b[0] = #5484 1'b1;
	b[0] = #3900 1'b0;
	b[0] = #1075 1'b1;
	# 1366;
	repeat(2)
	begin
		b[0] = 1'b0;
		b[0] = #1967 1'b1;
		# 1366;
	end
	b[0] = 1'b0;
	b[0] = #1924 1'b1;
	b[0] = #3112 1'b0;
	b[0] = #5500 1'b1;
	b[0] = #4430 1'b0;
	b[0] = #13600 1'b1;
	b[0] = #5362 1'b0;
	b[0] = #5300 1'b1;
	b[0] = #4662 1'b0;
	b[0] = #4467 1'b1;
	b[0] = #2199 1'b0;
	b[0] = #4467 1'b1;
	b[0] = #2199 1'b0;
	b[0] = #4467 1'b1;
	b[0] = #6363 1'b0;
	b[0] = #13400 1'b1;
	b[0] = #472 1'b0;
	b[0] = #1833 1'b1;
	b[0] = #4900 1'b0;
	b[0] = #3267 1'b1;
	# 1197;
	repeat(2)
	begin
		b[0] = 1'b0;
		b[0] = #1434 1'b1;
		# 1899;
	end
	b[0] = 1'b0;
	b[0] = #1434 1'b1;
end 

eq2_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.sampler_tx(sampler)
);

eq2_vlg_check_tst tb_out(
	.aeqb(aeqb),
	.sampler_rx(sampler)
);
endmodule


// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/02/2015 21:30:47"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    zero_top
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module zero_top_vlg_sample_tst(
	a,
	clk,
	reset,
	start,
	sampler_tx
);
input [9:0] a;
input  clk;
input  reset;
input  start;
output sampler_tx;

reg sample;
time current_time;
always @(a or clk or reset or start)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module zero_top_vlg_check_tst (
	count,
	ready,
	sampler_rx
);
input [3:0] count;
input  ready;
input sampler_rx;

reg [3:0] count_expected;
reg  ready_expected;

reg [3:0] count_prev;
reg  ready_prev;

reg [3:0] count_expected_prev;
reg  ready_expected_prev;

reg [3:0] last_count_exp;
reg  last_ready_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	count_prev = count;
	ready_prev = ready;
end

// update expected /o prevs

always @(trigger)
begin
	count_expected_prev = count_expected;
	ready_expected_prev = ready_expected;
end


// expected count[ 3 ]
initial
begin
	count_expected[3] = 1'bX;
end 
// expected count[ 2 ]
initial
begin
	count_expected[2] = 1'bX;
end 
// expected count[ 1 ]
initial
begin
	count_expected[1] = 1'bX;
end 
// expected count[ 0 ]
initial
begin
	count_expected[0] = 1'bX;
end 

// expected ready
initial
begin
	ready_expected = 1'bX;
end 
// generate trigger
always @(count_expected or count or ready_expected or ready)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected count = %b | expected ready = %b | ",count_expected_prev,ready_expected_prev);
	$display("| real count = %b | real ready = %b | ",count_prev,ready_prev);
`endif
	if (
		( count_expected_prev[0] !== 1'bx ) && ( count_prev[0] !== count_expected_prev[0] )
		&& ((count_expected_prev[0] !== last_count_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_exp[0] = count_expected_prev[0];
	end
	if (
		( count_expected_prev[1] !== 1'bx ) && ( count_prev[1] !== count_expected_prev[1] )
		&& ((count_expected_prev[1] !== last_count_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_exp[1] = count_expected_prev[1];
	end
	if (
		( count_expected_prev[2] !== 1'bx ) && ( count_prev[2] !== count_expected_prev[2] )
		&& ((count_expected_prev[2] !== last_count_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_exp[2] = count_expected_prev[2];
	end
	if (
		( count_expected_prev[3] !== 1'bx ) && ( count_prev[3] !== count_expected_prev[3] )
		&& ((count_expected_prev[3] !== last_count_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_exp[3] = count_expected_prev[3];
	end
	if (
		( ready_expected_prev !== 1'bx ) && ( ready_prev !== ready_expected_prev )
		&& ((ready_expected_prev !== last_ready_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ready :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ready_expected_prev);
		$display ("     Real value = %b", ready_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ready_exp = ready_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#200000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module zero_top_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [9:0] a;
reg clk;
reg reset;
reg start;
// wires                                               
wire [3:0] count;
wire ready;

wire sampler;                             

// assign statements (if any)                          
zero_top i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.clk(clk),
	.count(count),
	.ready(ready),
	.reset(reset),
	.start(start)
);

// reset
initial
begin
	reset = 1'b0;
	reset = #40000 1'b1;
	reset = #10000 1'b0;
	reset = #60000 1'b1;
	reset = #10000 1'b0;
	reset = #20000 1'b1;
	reset = #10000 1'b0;
end 

// start
initial
begin
	start = 1'b0;
	start = #2623 1'b1;
	# 3932;
	repeat(2)
	begin
		start = 1'b0;
		start = #2734 1'b1;
		# 3932;
	end
	start = 1'b0;
	start = #4465 1'b1;
	start = #8800 1'b0;
	start = #6848 1'b1;
	start = #2868 1'b0;
	start = #13400 1'b1;
	start = #3732 1'b0;
	start = #2293 1'b1;
	start = #4500 1'b0;
	start = #3207 1'b1;
	# 190;
	repeat(2)
	begin
		start = 1'b0;
		start = #2034 1'b1;
		# 1299;
	end
	start = 1'b0;
	start = #2034 1'b1;
	start = #1110 1'b0;
	start = #1165 1'b1;
	# 1033;
	repeat(2)
	begin
		start = 1'b0;
		start = #2300 1'b1;
		# 1033;
	end
	start = 1'b0;
	start = #1136 1'b1;
	start = #458 1'b0;
	start = #5100 1'b1;
	start = #4900 1'b0;
	start = #5100 1'b1;
	start = #4442 1'b0;
	start = #9191 1'b1;
	start = #6800 1'b0;
	start = #6262 1'b1;
	start = #6000 1'b0;
	start = #1747 1'b1;
	# 334;
	repeat(2)
	begin
		start = 1'b0;
		start = #2267 1'b1;
		# 1066;
	end
	start = 1'b0;
	start = #2267 1'b1;
	start = #9895 1'b0;
	start = #8200 1'b1;
	start = #2719 1'b0;
	start = #6200 1'b1;
	start = #3719 1'b0;
	start = #4797 1'b1;
	start = #11000 1'b0;
end 
// a[ 9 ]
initial
begin
	a[9] = 1'b0;
end 
// a[ 8 ]
initial
begin
	a[8] = 1'b0;
end 
// a[ 7 ]
initial
begin
	a[7] = 1'b0;
end 
// a[ 6 ]
initial
begin
	a[6] = 1'b0;
end 
// a[ 5 ]
initial
begin
	a[5] = 1'b0;
end 
// a[ 4 ]
initial
begin
	a[4] = 1'b0;
	a[4] = #160000 1'b1;
end 
// a[ 3 ]
initial
begin
	a[3] = 1'b0;
	a[3] = #80000 1'b1;
	a[3] = #80000 1'b0;
end 
// a[ 2 ]
initial
begin
	repeat(2)
	begin
		a[2] = 1'b0;
		a[2] = #40000 1'b1;
		# 40000;
	end
	a[2] = 1'b0;
end 
// a[ 1 ]
always
begin
	a[1] = 1'b0;
	a[1] = #20000 1'b1;
	#20000;
end 
// a[ 0 ]
always
begin
	a[0] = 1'b0;
	a[0] = #10000 1'b1;
	#10000;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #1000 1'b1;
	#1000;
end 

zero_top_vlg_sample_tst tb_sample (
	.a(a),
	.clk(clk),
	.reset(reset),
	.start(start),
	.sampler_tx(sampler)
);

zero_top_vlg_check_tst tb_out(
	.count(count),
	.ready(ready),
	.sampler_rx(sampler)
);
endmodule


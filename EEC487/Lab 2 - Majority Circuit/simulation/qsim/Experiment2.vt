// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/13/2015 16:29:33"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    maj
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module maj_vlg_sample_tst(
	v,
	sampler_tx
);
input [3:0] v;
output sampler_tx;

reg sample;
time current_time;
always @(v)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module maj_vlg_check_tst (
	fail,
	pass,
	tie,
	sampler_rx
);
input  fail;
input  pass;
input  tie;
input sampler_rx;

reg  fail_expected;
reg  pass_expected;
reg  tie_expected;

reg  fail_prev;
reg  pass_prev;
reg  tie_prev;

reg  fail_expected_prev;
reg  pass_expected_prev;
reg  tie_expected_prev;

reg  last_fail_exp;
reg  last_pass_exp;
reg  last_tie_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	fail_prev = fail;
	pass_prev = pass;
	tie_prev = tie;
end

// update expected /o prevs

always @(trigger)
begin
	fail_expected_prev = fail_expected;
	pass_expected_prev = pass_expected;
	tie_expected_prev = tie_expected;
end



// expected fail
initial
begin
	fail_expected = 1'bX;
end 

// expected pass
initial
begin
	pass_expected = 1'bX;
end 

// expected tie
initial
begin
	tie_expected = 1'bX;
end 
// generate trigger
always @(fail_expected or fail or pass_expected or pass or tie_expected or tie)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected fail = %b | expected pass = %b | expected tie = %b | ",fail_expected_prev,pass_expected_prev,tie_expected_prev);
	$display("| real fail = %b | real pass = %b | real tie = %b | ",fail_prev,pass_prev,tie_prev);
`endif
	if (
		( fail_expected_prev !== 1'bx ) && ( fail_prev !== fail_expected_prev )
		&& ((fail_expected_prev !== last_fail_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fail :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fail_expected_prev);
		$display ("     Real value = %b", fail_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_fail_exp = fail_expected_prev;
	end
	if (
		( pass_expected_prev !== 1'bx ) && ( pass_prev !== pass_expected_prev )
		&& ((pass_expected_prev !== last_pass_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pass :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pass_expected_prev);
		$display ("     Real value = %b", pass_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pass_exp = pass_expected_prev;
	end
	if (
		( tie_expected_prev !== 1'bx ) && ( tie_prev !== tie_expected_prev )
		&& ((tie_expected_prev !== last_tie_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tie :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tie_expected_prev);
		$display ("     Real value = %b", tie_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_tie_exp = tie_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#160000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module maj_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] v;
// wires                                               
wire fail;
wire pass;
wire tie;

wire sampler;                             

// assign statements (if any)                          
maj i1 (
// port map - connection between master ports and signals/registers   
	.fail(fail),
	.pass(pass),
	.tie(tie),
	.v(v)
);
// v[ 3 ]
always
begin
	v[3] = 1'b0;
	v[3] = #80000 1'b1;
	#80000;
end 
// v[ 2 ]
always
begin
	v[2] = 1'b0;
	v[2] = #40000 1'b1;
	#40000;
end 
// v[ 1 ]
always
begin
	v[1] = 1'b0;
	v[1] = #20000 1'b1;
	#20000;
end 
// v[ 0 ]
always
begin
	v[0] = 1'b0;
	v[0] = #10000 1'b1;
	#10000;
end 

maj_vlg_sample_tst tb_sample (
	.v(v),
	.sampler_tx(sampler)
);

maj_vlg_check_tst tb_out(
	.fail(fail),
	.pass(pass),
	.tie(tie),
	.sampler_rx(sampler)
);
endmodule

